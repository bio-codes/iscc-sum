{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ISCC-SUM: High-Performance Content Identification for Science","text":"<p>Version 0.1.0</p> <p>First optimized implementation of ISCC Data-Code and Instance-Code generation.</p> <ul> <li> <p> 50-130\u00d7 Faster</p> <p>Process large amounts of scientific data in minutes, not hours. Built with Rust for maximum performance.</p> </li> <li> <p> Scientific Focus</p> <p>Designed for bioimaging workflows and large-scale scientific data management.</p> </li> <li> <p> ISO Standard</p> <p>Based on ISO 24138:2024, ensuring global interoperability.</p> </li> <li> <p> Easy Integration</p> <p>Drop-in replacement for checksum tools with familiar CLI and Python API.</p> </li> </ul> <p>From the BIO-CODES Project</p> <p>ISCC-SUM addresses fundamental challenges in scientific data identification, particularly for bioimaging and large-scale research datasets.</p>"},{"location":"#challenge-large-data-volumes","title":"Challenge: Large Data Volumes","text":"<p>Scientific instruments generate terabytes of data daily.</p> <p>Solution: Our Rust-based implementation processes data up to 130\u00d7 faster than the pure python ISO reference implementation, making it practical for:</p> <ul> <li>High-throughput microscopy facilities</li> <li>Genomic sequencing centers</li> <li>Climate modeling archives</li> <li>Astronomical observation data</li> </ul>"},{"location":"#challenge-complex-file-formats","title":"Challenge: Complex File Formats","text":"<p>Scientific data comes in hundreds of specialized formats - from DICOM medical images to HDF5 datasets.</p> <p>Solution: ISCC-SUM focuses on improving the media-agnostic ISCC-UNITs that work with any data format:</p> Container FormatsRaw Data <pre><code>\u2713 ZARR (multidimensional array data)\n\u2713 HDF5 (hierarchical data)\n\u2713 NetCDF (climate/ocean data)\n\u2713 DICOM (medical imaging)\n</code></pre> <pre><code>\u2713 FASTQ (sequencing)\n\u2713 FITS (astronomy)\n\u2713 SEG-Y (seismic)\n\u2713 Any binary format\n</code></pre>"},{"location":"#challenge-scientific-adoption","title":"Challenge: Scientific Adoption","text":"<p>Researchers need tools that integrate seamlessly with existing workflows.</p> <p>Solution: Familiar checksum-style interface:</p> <pre><code># Just like md5sum or sha256sum\niscc-sum --tree imagedata.zarr\nISCC:KAA7WQPPQ6J54VLNZJ4LSMDTTEMI2DDUEHCG5DQVWCJVKENQCHSTOSA  *imagedata.zarr/\n\n# Process entire datasets\niscc-sum /data/microscopy/*.tiff &gt; checksums.txt\n</code></pre>"},{"location":"#core-components","title":"Core Components","text":"<ul> <li>Rust Library - High-performance implementations of Data-Code and Instance-Code algorithms (1)</li> <li>Python Extensions - Native bindings for seamless Python integration</li> <li>CLI Tool - Unix-style command familiar to developers</li> <li>Single-Pass Processing - Generate both codes reading data only once</li> </ul> <ol> <li>Optimized for parallel processing on modern multi-core systems</li> </ol>"},{"location":"#why-iscc-for-science","title":"Why ISCC for Science?","text":"<p>Beyond Simple Checksums</p> <p>ISCC provides content-derived similarity hashes that can verify data integrity and find similar data at the same time.</p>"},{"location":"#unique-advantages-for-research","title":"Unique Advantages for Research","text":"Feature Traditional Checksums ISCC-SUM Data Similarity Detection  No  Built-in Container Level Checksums  No  Yes, storage agnostic Standard Compliance  Various standards ISO 24138:2024"},{"location":"#real-world-applications","title":"Real-World Applications","text":"BioimagingData ArchivesComputational Science"},{"location":"#microscopy-facilities","title":"Microscopy Facilities","text":"<ul> <li>Duplicate Detection: Identify redundant datasets across different studies</li> <li>Data Integrity: Verify images haven't been corrupted during transfer</li> <li>Collaboration: Share verifiable references to specific datasets</li> </ul> <pre><code>from iscc_sum import code_iscc_sum\n\n# Generate ISCC for microscopy image\ncode = code_iscc_sum(\"cell_culture_z047.ome.tiff\")\n</code></pre>"},{"location":"#scientific-repositories","title":"Scientific Repositories","text":"<ul> <li>Deduplication: Save storage by identifying duplicate submissions</li> <li>Version Tracking: Track dataset evolution over time</li> <li>Citation: Create persistent, verifiable data citations</li> </ul> <pre><code># Process entire archive\niscc-sum --similar /archive\n</code></pre>"},{"location":"#hpc-workflows","title":"HPC Workflows","text":"<ul> <li>Provenance: Track inputs/outputs in complex pipelines</li> <li>Reproducibility: Verify exact datasets used in publications</li> <li>Distribution: Efficiently sync datasets across compute nodes</li> </ul> <pre><code># Verify dataset before processing\niscc-sum --check dataset.iscc\n</code></pre>"},{"location":"#technical-innovation","title":"Technical Innovation","text":"<p>Extending the Standard</p> <p>ISCC-SUM introduces several enhancements beneficial for scientific computing:</p> <p> TREEWALK : Efficient deterministic storage tree hashing for large dataset collections</p> <p> SUBTYPE WIDE : Extended codes for higher precision in similarity detection</p> <p> CHECKSUM API : Drop-in replacement for existing checksum workflows</p> <p> Future: WebAssembly : Process bioimages directly in web browsers (planned)</p>"},{"location":"#performance-benchmarks","title":"Performance Benchmarks","text":"<p>Real-world performance of in-memory data processing</p> Data Size ISO Reference ISCC-SUM Speedup 1 MB 5.97 MB/s 476.17 MB/s 79x 10 MB 6.48 MB/s 956.14 MB/ 147\u00d7 100 MB 6.09 MB/s 1121.44 MB/s 184\u00d7"},{"location":"#get-started-today","title":"Get Started Today","text":"<ul> <li> <p> Quick Start</p> <p>Install and generate your first ISCC in under 5 minutes</p> </li> <li> <p> User Guide</p> <p>Comprehensive documentation for all features</p> </li> <li> <p> API Reference</p> <p>Integrate ISCC-SUM into your Python applications</p> </li> <li> <p> GitHub</p> <p>View source code and contribute</p> </li> </ul> <p>About the BIO-CODES Project</p> <p>ISCC-SUM is developed as part of BIO-CODES, funded by the European Union's Horizon Europe programme (Grant Agreement No 101060954). Our mission is to make advanced content identification accessible to the global scientific community.</p> <p> Learn more about ISCC</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2025-06-19","title":"[0.1.0] - 2025-06-19","text":""},{"location":"changelog/#summary","title":"Summary","text":"<p>First stable release of iscc-sum, a high-performance ISCC Data-Code and Instance-Code hashing tool built in Rust with Python bindings. This release achieves 50-130x performance improvements over the pure python reference implementation while maintaining full compatibility with the ISCC standard.</p>"},{"location":"changelog/#added","title":"Added","text":""},{"location":"changelog/#core-features","title":"Core Features","text":"<ul> <li>ISCC Data-Code generation: Content-defined chunking (CDC) algorithm for content similarity detection<ul> <li>Wide format (128-bit, default) for enhanced security and similarity matching</li> <li>Narrow format (64-bit) for ISO 24138:2024 compliance via <code>--narrow</code> flag</li> </ul> </li> <li>ISCC Instance-Code generation: BLAKE3-based cryptographic hash for file integrity verification</li> <li>ISCC-SUM composite code: Combined Data-Code and Instance-Code with self-describing header</li> <li>High-performance processing: 950-1050 MB/s throughput using SIMD optimizations and parallel processing</li> </ul>"},{"location":"changelog/#command-line-interface","title":"Command-Line Interface","text":"<ul> <li>Full-featured CLI (<code>iscc-sum</code>) with Unix-style interface<ul> <li>Generate checksums for files, directories, and stdin</li> <li>Verify checksums from files (<code>-c, --check</code>)</li> <li>Find similar files based on data (<code>--similar</code>)</li> <li>Process directories as single objects (<code>-t, --tree</code>)</li> <li>BSD-style output format (<code>--tag</code>)</li> <li>NUL-terminated output (<code>--zero</code>)</li> <li>Show individual code components (<code>--units</code>)</li> </ul> </li> </ul>"},{"location":"changelog/#python-api","title":"Python API","text":"<ul> <li>High-level API for easy integration<ul> <li><code>code_iscc_sum()</code> function supporting local files and fsspec URIs</li> <li>Streaming processors for large file handling</li> <li>Dictionary-compatible result objects</li> </ul> </li> <li>Universal path support via fsspec integration<ul> <li>Process files from S3, HTTP/HTTPS, and other remote sources</li> <li>Transparent handling of different storage backends</li> </ul> </li> </ul>"},{"location":"changelog/#platform-support","title":"Platform Support","text":"<ul> <li>Cross-platform compatibility: Linux, macOS, and Windows</li> <li>Python version support: 3.10, 3.11, 3.12, and 3.13</li> <li>Pre-built wheels for all major platforms</li> </ul>"},{"location":"changelog/#developer-experience","title":"Developer Experience","text":"<ul> <li>100% test coverage requirement with comprehensive test suite</li> <li>Integrated tooling via poethepoet task automation</li> <li>Type annotations with mypy type checking</li> <li>Security scanning with Bandit</li> <li>Automated CI/CD pipeline with Release Please</li> </ul>"},{"location":"changelog/#performance","title":"Performance","text":"<ul> <li>50-130x faster than pure Python reference implementations</li> <li>950-1050 MB/s processing speed on modern hardware</li> <li>Parallel processing using Rayon for multi-core utilization</li> </ul>"},{"location":"changelog/#standards-compliance","title":"Standards Compliance","text":"<ul> <li>ISO 24138:2024 compatible when using <code>--narrow</code> flag</li> <li>Reference implementation compatibility for all code formats</li> <li>Deterministic output across platforms</li> </ul>"},{"location":"changelog/#known-limitations","title":"Known Limitations","text":"<ul> <li>This is an early release focused on core functionality</li> <li>Advanced ISCC features (Text-Code, Meta-Code) are out of scope for now</li> <li>Rust crate not published to crates.io in this release</li> </ul>"},{"location":"changelog/#dependencies","title":"Dependencies","text":"<ul> <li>blake3 &gt;=1.0.5 - Cryptographic hashing</li> <li>click &gt;=8.0.0 - CLI framework</li> <li>pathspec &gt;=0.12.1 - Gitignore-style pattern matching</li> <li>universal-pathlib &gt;=0.2.6 - Cross-platform path handling</li> <li>xxhash &gt;=3.5.0 - High-speed hashing for CDC</li> </ul>"},{"location":"changelog/#acknowledgments","title":"Acknowledgments","text":"<p>This project implements the ISCC (International Standard Content Code) as defined in ISO 24138:2024. The performance improvements are achieved through Rust's zero-cost abstractions and careful algorithm optimization while maintaining full compatibility with the standard.</p>"},{"location":"developers/","title":"iscc-sum","text":"<p>A blazing-fast ISCC Data-Code and Instance-Code hashing tool built in Rust with Python bindings. Delivers 50-130x faster performance than reference implementations, processing data at over 1 GB/s.</p> <p>Originally created to handle massive microscopic imaging datasets where existing tools were too slow.</p>"},{"location":"developers/#project-status","title":"Project Status","text":"<p>Version 0.1.0 \u2014 Initial release for Data-Code and Instance-Code generation.</p> <p>Warning</p> <p>This package is under active development, and breaking changes may be released at any time. Be sure to pin to specific versions if you're using this package in a production environment.</p>"},{"location":"developers/#performance","title":"Performance","text":"<ul> <li>950-1050 MB/s processing speed (vs 7-8 MB/s reference)</li> <li>50-130x faster than existing implementations</li> <li>Consistent performance on multi-GB files</li> </ul> <p>Ideal for large-scale data processing: microscopic imaging, video files, scientific datasets.</p>"},{"location":"developers/#installation","title":"Installation","text":""},{"location":"developers/#python-package","title":"Python Package","text":"<p>The recommended way to install the iscc-sum CLI tool is using uv:</p> <pre><code>uv tool install iscc-sum\n</code></pre> <p>Note: To install uv, run: <code>curl -LsSf https://astral.sh/uv/install.sh | sh</code> (or see other installation methods)</p>"},{"location":"developers/#usage","title":"Usage","text":""},{"location":"developers/#command-line-interface","title":"Command Line Interface","text":"<p>The <code>iscc-sum</code> command provides checksum generation and verification functionality similar to standard tools like <code>md5sum</code> or <code>sha256sum</code>, but using ISCC (International Standard Content Code) checksums.</p>"},{"location":"developers/#basic-usage","title":"Basic Usage","text":"<pre><code># Generate checksum for a file\niscc-sum document.pdf\n# Output: ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *document.pdf\n\n# Generate checksums for multiple files\niscc-sum *.txt\n\n# Read from standard input\necho \"Hello, World!\" | iscc-sum\ncat document.txt | iscc-sum\n</code></pre> <p>Note</p> <p>By default, this tool creates ISCC-CODEs of SubType WIDE, introduced for large-scale secure checksum support with data similarity matching capabilities. This SubType is not yet part of the ISO 24138:2024 standard but is supported by the latest version of the Iscc-Core reference implementation. For ISO 24138:2024 conformant ISCC-CODEs, use the <code>--narrow</code> flag in the CLI tool.</p>"},{"location":"developers/#checksum-verification","title":"Checksum Verification","text":"<pre><code># Create a checksum file\niscc-sum *.txt &gt; checksums.txt\n\n# Verify checksums\niscc-sum -c checksums.txt\n# Output:\n# file1.txt: OK\n# file2.txt: OK\n\n# Verify with quiet mode (only show failures)\niscc-sum -c -q checksums.txt\n</code></pre>"},{"location":"developers/#output-formats","title":"Output Formats","text":"<pre><code># Default format (GNU style)\niscc-sum file.txt\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *file.txt\n\n# BSD-style format\niscc-sum --tag file.txt\n# ISCC (file.txt) = ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY\n\n# Narrow format (128-bit)\niscc-sum --narrow file.txt\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HU *file.txt\n\n# Show component codes\niscc-sum --units file.txt\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *file.txt\n#   ISCC:EAAW4BQTJSTJSHAI27AJSAGMGHNUKSKRTK3E6OZ5CXUS57SWQZXJQ\n#   ISCC:IABXF3ZHYL6O6PM5P2HGV677CS3RBHINZSXEJCITE3WNOTQ2CYXRA\n\n# Process entire directory as single unit\niscc-sum --tree /path/to/project\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY */path/to/project/\n</code></pre>"},{"location":"developers/#similarity-matching","title":"Similarity Matching","text":"<p>Find files with similar content:</p> <pre><code># Find similar files (default threshold: 12 bits)\niscc-sum --similar *.jpg\n# Output:\n# photo1.jpg\n#   ~8  photo2.jpg\n#   ~12 photo3.jpg\n\n# Adjust similarity threshold\niscc-sum --similar --threshold 6 *.pdf\n</code></pre>"},{"location":"developers/#complete-options","title":"Complete Options","text":"<pre><code>iscc-sum --help  # Show all available options\n\nOptions:\n-c, --check      Read checksums from files and check them\n--narrow         Generate shorter 128-bit checksums\n--tag            Create a BSD-style checksum\n--units          Show Data-Code and Instance-Code components\n-z, --zero       End each output line with NUL\n--similar        Find files with similar Data-Codes\n--threshold      Hamming distance threshold for similarity (default: 12)\n-t, --tree       Process directory as single unit with combined checksum\n-q, --quiet      Don't print OK for each verified file\n--status         Don't output anything, exit code shows success\n-w, --warn       Warn about improperly formatted lines\n--strict         Exit non-zero for improperly formatted lines\n</code></pre>"},{"location":"developers/#python-api","title":"Python API","text":""},{"location":"developers/#quick-start","title":"Quick Start","text":"<p>Generate ISCC-SUM codes for files:</p> <pre><code>&gt;&gt;&gt; from iscc_sum import code_iscc_sum\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Generate extended ISCC-SUM for a file\n&gt;&gt;&gt; result = code_iscc_sum(\"LICENSE\", wide=True)\n&gt;&gt;&gt; result.iscc\n'ISCC:K4AA2G6UMXGFJAO6ZOMIFZIYO6LYMOBT7Q6JDI3Z75IJWQY5WH372QA'\n&gt;&gt;&gt; result.datahash\n'1e203833fc3c91a379ff509b431db1f7fd40dea69a6614249f420ec62398957087b1'\n&gt;&gt;&gt; result.filesize\n11357\n</code></pre>"},{"location":"developers/#streaming-api","title":"Streaming API","text":"<p>For large files or streaming data, use the processor classes:</p> <pre><code>from iscc_sum import IsccSumProcessor\n\nprocessor = IsccSumProcessor()\nwith open(\"large_file.bin\", \"rb\") as f:\n    while chunk := f.read(1024 * 1024):  # Read in 1MB chunks\n        processor.update(chunk)\n\nresult = processor.result(wide=False, add_units=True)\nprint(f\"ISCC: {result.iscc}\")\nprint(f\"Units: {result.units}\")  # Individual Data-Code and Instance-Code\n</code></pre>"},{"location":"developers/#development","title":"Development","text":""},{"location":"developers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Rust (latest stable) - Install from rustup.rs</li> <li>Python 3.10+</li> <li>UV (for Python dependency management) - Install from astral.sh/uv</li> </ul>"},{"location":"developers/#quick-setup","title":"Quick Setup","text":"<pre><code># Clone the repository\n\ngit clone https://github.com/bio-codes/iscc-sum.git\ncd iscc-sum\n\n# Install Python dependencies\nuv sync --all-extras\n\n# Setup Rust development components\nuv run poe setup\n\n# Build Python extension and run all checks\nuv run poe all\n</code></pre>"},{"location":"developers/#development-commands","title":"Development Commands","text":"<p>All development tasks are managed through poethepoet:</p> <pre><code># One-time setup (installs Rust components)\nuv run poe setup\n\n# Pre-commit checks (format, lint, test everything)\nuv run poe all\n\n# Individual commands\nuv run poe format        # Format all code (Rust + Python)\nuv run poe test          # Run all tests (Rust + Python)\nuv run poe typecheck     # Run Python type checking\nuv run poe rust-build    # Build Rust binary\nuv run poe build-ext     # Build Python extension\n\n# Check if Rust toolchain is properly installed\nuv run poe check-rust\n</code></pre>"},{"location":"developers/#manual-setup-if-needed","title":"Manual Setup (if needed)","text":"<pre><code># Install all dependencies including dev dependencies\nuv sync --all-extras\n\n# Install Rust components manually\nrustup component add rustfmt clippy\n\n# Build Rust extension for Python\nuv run maturin develop\n\n# Run tests manually\ncargo test        # Rust tests\nuv run pytest     # Python tests\n</code></pre>"},{"location":"developers/#building","title":"Building","text":"<pre><code># Build Rust binary (creates isum executable)\ncargo build --release\n\n# Build Python wheels\nmaturin build --release\n</code></pre>"},{"location":"developers/#funding","title":"Funding","text":"<p>This project has received funding from the European Commission's Horizon Europe Research and Innovation programme under grant agreement No. 101129751 as part of the BIO-CODES project (Enhancing AI-Readiness of Bioimaging Data with Content-Based Identifiers).</p>"},{"location":"developers/#license","title":"License","text":"<p>This project is licensed under the Apache License, Version 2.0 - see the LICENSE file for details.</p>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with ISCC-SUM in minutes! This guide shows you how to install and use the command-line tool to generate similarity-preserving ISCC checksums for files and directories.</p> New to Terminal/Command Line? Start Here! <p>If you've never used a terminal (also called command line) before, don't worry! Here's a quick primer:</p> <p>What is a Terminal?</p> <p>A terminal is a text-based way to interact with your computer. Instead of clicking buttons, you type commands.</p> <p>How to Open a Terminal:</p> WindowsmacOSLinux <ul> <li>Press Win+R, type <code>cmd</code> or <code>powershell</code>, and press Enter</li> <li>Or: Right-click the Start button and select \"Windows Terminal\" or \"Command Prompt\"</li> </ul> <ul> <li>Press Cmd+Space, type <code>terminal</code>, and press Enter</li> <li>Or: Go to Applications \u2192 Utilities \u2192 Terminal</li> </ul> <ul> <li>Press Ctrl+Alt+T</li> <li>Or: Look for \"Terminal\" in your applications menu</li> </ul> <p>Basic Terminal Commands You'll Need:</p> <ul> <li><code>cd foldername</code> - Navigate into a folder (cd = \"change directory\")</li> <li><code>cd ..</code> - Go back to the parent folder</li> <li><code>ls</code> (macOS/Linux) or <code>dir</code> (Windows) - List files in current folder</li> <li><code>pwd</code> - Show current folder path (print working directory)</li> </ul> <p>Example Navigation:</p> <pre><code># See where you are\npwd\n\n# List files in current folder\nls                    # macOS/Linux\ndir                   # Windows\n\n# Navigate to your Documents folder\ncd Documents\n\n# Go back one level\ncd ..\n</code></pre> <p>Tips for Beginners:</p> <ul> <li> Commands are case-sensitive on macOS/Linux</li> <li> Press Tab to auto-complete file/folder names</li> <li> Press Up to recall previous commands</li> <li> Type <code>clear</code> (macOS/Linux) or <code>cls</code> (Windows) to clear the screen</li> <li> Copy text: Ctrl+C (Windows/Linux) or Cmd+C (macOS)</li> <li> Paste text: Ctrl+V (Windows/Linux) or Cmd+V (macOS)</li> </ul>"},{"location":"quickstart/#installation-in-10-seconds","title":"Installation in 10 Seconds","text":"<p>The fastest way to use ISCC-SUM is with UV:</p>"},{"location":"quickstart/#step-1-install-uv-one-time-setup","title":"Step 1: Install UV (One-time Setup)","text":"<p>UV is a modern Python tool installer that handles everything for you - including Python itself!</p> Linux/macOSWindows <pre><code>curl -LsSf https://astral.sh/uv/install.sh | sh\n</code></pre> <pre><code>powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>After Installation</p> <p>Close and reopen your terminal to ensure UV is available in your PATH.</p>"},{"location":"quickstart/#step-2-run-iscc-sum-instantly","title":"Step 2: Run ISCC-SUM Instantly","text":"<p>Now you can run ISCC-SUM without any further installation. Let's try it with a test file:</p> <pre><code># Create a test file\necho \"Hello ISCC!\" &gt; test.txt\n\n# Generate its ISCC checksum\nuvx iscc-sum test.txt\n</code></pre> <p>You should see output like this:</p> <pre><code>ISCC:K4AND37MEJ2QHCZ2DK5OUWSF7FGIYKDWBBPG3VOKM6FE5NPXZXA33SI *test.txt\n</code></pre> <p>It worked!</p> <p>Congratulations! You just generated your first ISCC checksum. The long string starting with \"ISCC:\" is a unique fingerprint of your file's content.</p> <p>Using with your own files</p> <p>To process your own files, simply navigate to their location first:</p> <pre><code># Navigate to the folder with your files\ncd Documents\n\n# Run ISCC-SUM on any file\nuvx iscc-sum myfile.pdf\n</code></pre>"},{"location":"quickstart/#permanent-installation","title":"Permanent Installation","text":"<p>For frequent use, install ISCC-SUM globally:</p> <pre><code>uv tool install iscc-sum\n</code></pre> <p>After installation, you can simply type <code>iscc-sum</code> from anywhere in your terminal.</p>"},{"location":"quickstart/#basic-examples","title":"Basic Examples","text":"<p>What's an ISCC Checksum?</p> <p>Think of it like a unique ID for your file's content. If the file changes even slightly, the fingerprint changes too. This helps you:</p> <ul> <li> Detect if files have been modified</li> <li> Find duplicate or similar files</li> <li> Verify file integrity</li> </ul>"},{"location":"quickstart/#generate-a-checksum-for-a-single-file","title":"Generate a checksum for a single file","text":"<p>Open your terminal in the folder containing your file, then run:</p> <pre><code>iscc-sum document.pdf\n</code></pre> <p>Output:</p> <pre><code>ISCC:KAATT7GQ6V5CDXEHRJPQBU3YH7V2XMCSADJWV3CZQFOPH5LOGZQQ  document.pdf\n</code></pre> <p>The long string starting with \"ISCC:\" is your file's unique fingerprint.</p>"},{"location":"quickstart/#process-multiple-files","title":"Process multiple files","text":"<p>To process all JPEG images in a folder:</p> <pre><code>iscc-sum *.jpg\n</code></pre> <p>Output:</p> <pre><code>ISCC:KAAUSPE5KJYTY43L5OR4A5YLKQVVIMRYVFVJDVCZV5YKOEAPH3JA  image1.jpg\nISCC:KAAQZVGNJY4D2IFXEWV6DZF5JMHZ2C2ZXSOD5RCQGQEMAVVZ5VIA  image2.jpg\nISCC:KAASFWXNH6S3S7OLJQMGOQNLSCZ74CTQV3SJVHGJJ76SUXKGDZXQ  image3.jpg\n</code></pre> <p>Wildcard Patterns</p> <p>The <code>*</code> symbol means \"all files\". So <code>*.jpg</code> means \"all files ending with .jpg\"</p>"},{"location":"quickstart/#verify-file-integrity","title":"Verify file integrity","text":"<p>This is useful for checking if your files have been modified or corrupted.</p> <p>Step 1: Save checksums to a file</p> <pre><code>iscc-sum *.txt -o checksums.iscc\n</code></pre> <p>This creates a file called <code>checksums.iscc</code> containing fingerprints of all .txt files.</p> <p>Cross-platform Compatibility</p> <p>The <code>-o</code> option ensures cross-platform compatible output (UTF-8, LF line endings), avoiding issues with shell redirection on Windows.</p> <p>Step 2: Later, verify the files haven't changed</p> <pre><code>iscc-sum --check checksums.iscc\n</code></pre> <p>Output:</p> <pre><code>file1.txt: OK\nfile2.txt: OK\nfile3.txt: FAILED\niscc-sum: WARNING: 1 computed checksum did NOT match\n</code></pre> <p>This tells you that <code>file3.txt</code> has been modified since you created the checksums.</p>"},{"location":"quickstart/#tree-mode-process-entire-directories","title":"Tree Mode - Process Entire Directories","text":"<p>Sometimes you want a single fingerprint for an entire folder and all its contents. This is called \"tree mode\".</p> <pre><code>iscc-sum --tree ./my-subfolder\n</code></pre> <p>What Tree Mode Captures</p> <p>This creates one unique fingerprint that represents:</p> <ul> <li> All files in the folder</li> <li> All subfolders and their files</li> <li> The folder structure itself</li> </ul> <p>When to use tree mode</p> <ul> <li> Creating a \"snapshot\" of a project folder</li> <li> Checking if anything in a folder has changed</li> <li> Archiving or backing up folder structures</li> </ul>"},{"location":"quickstart/#comparison-with-familiar-tools","title":"Comparison with Familiar Tools","text":"<p>If you've used <code>md5sum</code> or <code>sha256sum</code>, you'll feel right at home:</p> Tool Generate Checksum Verify Files md5sum <code>md5sum file.txt</code> <code>md5sum -c sums.md5</code> sha256sum <code>sha256sum file.txt</code> <code>sha256sum -c sums.sha256</code> iscc-sum <code>iscc-sum file.txt</code> <code>iscc-sum -c sums.iscc</code> <p>Key Advantages</p> <p>Unlike traditional checksums, ISCC-SUM:</p> <ul> <li> Are content-aware - similar files produce similar codes</li> <li> Follow an ISO standard - ensuring global interoperability</li> <li> Process files 50-130x faster than the ISO reference implementation</li> </ul>"},{"location":"quickstart/#whats-next","title":"What's Next?","text":"<p>Explore Further</p> <ul> <li> CLI Power Users: See the User Guide for advanced options</li> <li> Python Developers: Check out the Developer Guide for API usage</li> <li> Learn More: Read about ISCC extensions for BioCodes</li> </ul>"},{"location":"releasing/","title":"Release Process for iscc-sum","text":"<p>This document describes the release process for the iscc-sum project, which includes both a Rust CLI tool and a Python library with Rust extensions.</p>"},{"location":"releasing/#prerequisites","title":"Prerequisites","text":""},{"location":"releasing/#required-accounts","title":"Required Accounts","text":"<ol> <li> <p>crates.io account - For publishing the Rust crate</p> <ul> <li>Create an account at https://crates.io</li> <li>Generate an API token from your account settings</li> </ul> </li> <li> <p>PyPI account - For publishing the Python package</p> <ul> <li>The project uses PyPI trusted publishing (OIDC)</li> <li>No API token needed - authentication happens through GitHub Actions</li> </ul> </li> </ol>"},{"location":"releasing/#github-repository-secrets","title":"GitHub Repository Secrets","text":"<p>Configure the following secret in your GitHub repository settings:</p> <ul> <li><code>CRATES_IO_TOKEN</code> - Your crates.io API token</li> </ul> <p>To add the secret:</p> <ol> <li>Go to Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Click \"New repository secret\"</li> <li>Name: <code>CRATES_IO_TOKEN</code></li> <li>Value: Your crates.io API token</li> </ol>"},{"location":"releasing/#version-management","title":"Version Management","text":"<p>The project uses semantic versioning (SemVer) with the format <code>MAJOR.MINOR.PATCH[-PRERELEASE]</code>.</p> <p>Current version locations:</p> <ul> <li><code>Cargo.toml</code> - Rust crate version</li> <li><code>pyproject.toml</code> - Python package version</li> </ul> <p>Both versions must be kept in sync.</p>"},{"location":"releasing/#pre-release-identifiers","title":"Pre-release Identifiers","text":"<ul> <li><code>alpha</code> - Early development releases (e.g., <code>0.1.0-alpha.1</code>)</li> <li><code>beta</code> - Feature-complete but still testing (e.g., <code>0.1.0-beta.1</code>)</li> <li><code>rc</code> - Release candidate (e.g., <code>0.1.0-rc.1</code>)</li> </ul>"},{"location":"releasing/#automated-release-process","title":"Automated Release Process","text":"<p>The project uses Release Please for automated release management.</p> <p>v0.1.0 Release Exception</p> <p>For the v0.1.0 release, the crates.io publishing step has been temporarily disabled in the release workflow. Only the Python package will be published to PyPI. This is documented in issue #[TBD] and the crates.io publishing will be restored for future releases.</p>"},{"location":"releasing/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Commit to main branch - Use conventional commit messages:</p> <ul> <li><code>feat:</code> - New features (bumps MINOR version)</li> <li><code>fix:</code> - Bug fixes (bumps PATCH version)</li> <li><code>feat!:</code> or <code>BREAKING CHANGE:</code> - Breaking changes (bumps MAJOR version)</li> </ul> </li> <li> <p>Release Please creates PR - Automatically generated when commits are pushed to main</p> <ul> <li>Updates version numbers in <code>Cargo.toml</code></li> <li>Generates/updates CHANGELOG.md</li> <li>Creates release notes</li> </ul> </li> <li> <p>Merge the Release PR - This triggers:</p> <ul> <li>Version sync to <code>pyproject.toml</code></li> <li>Git tag creation (e.g., <code>v0.1.0</code>)</li> <li>GitHub release creation</li> </ul> </li> <li> <p>Release workflow runs - Triggered by the version tag:</p> <ul> <li>Builds binaries for multiple platforms</li> <li>Builds Python wheels for multiple Python versions</li> <li>Publishes to crates.io</li> <li>Publishes to PyPI</li> <li>Uploads artifacts to GitHub release</li> </ul> </li> </ol>"},{"location":"releasing/#release-workflow-details","title":"Release Workflow Details","text":"<p>The release workflow (<code>release.yml</code>) performs:</p> <ol> <li> <p>Rust Binary Builds</p> <ul> <li>Linux (x86_64)</li> <li>Windows (x86_64)</li> <li>macOS (x86_64, ARM64)</li> </ul> </li> <li> <p>Python Wheel Builds</p> <ul> <li>Python 3.10-3.13</li> <li>Linux, Windows, macOS</li> <li>Both x86_64 and ARM64 architectures where applicable</li> </ul> </li> <li> <p>Publishing</p> <ul> <li>Publishes Rust crate to crates.io</li> <li>Publishes Python package to PyPI</li> <li>Creates GitHub release with all artifacts</li> </ul> </li> </ol>"},{"location":"releasing/#manual-release-process","title":"Manual Release Process","text":"<p>If you need to create a release manually:</p>"},{"location":"releasing/#1-update-versions","title":"1. Update Versions","text":"<p>Update version in both files:</p> <pre><code># Edit Cargo.toml\nversion = \"0.1.0\"\n\n# Edit pyproject.toml\nversion = \"0.1.0\"\n</code></pre>"},{"location":"releasing/#2-create-release-commit","title":"2. Create Release Commit","text":"<pre><code>git add Cargo.toml pyproject.toml\ngit commit -m \"chore: release 0.1.0\"\ngit push origin main\n</code></pre>"},{"location":"releasing/#3-create-and-push-tag","title":"3. Create and Push Tag","text":"<pre><code>git tag -a v0.1.0 -m \"Release v0.1.0\"\ngit push origin v0.1.0\n</code></pre> <p>This will trigger the release workflow automatically.</p>"},{"location":"releasing/#4-manual-publishing-if-automated-publishing-fails","title":"4. Manual Publishing (if automated publishing fails)","text":""},{"location":"releasing/#publish-to-cratesio","title":"Publish to crates.io:","text":"<pre><code>cargo publish\n</code></pre>"},{"location":"releasing/#publish-to-pypi","title":"Publish to PyPI:","text":"<pre><code># Build distributions\npython -m build\n\n# Upload to PyPI\npython -m twine upload dist/*\n</code></pre>"},{"location":"releasing/#pre-release-testing","title":"Pre-release Testing","text":"<p>Before creating a release:</p> <ol> <li> <p>Run all checks locally:</p> <pre><code>uv run poe all\n</code></pre> </li> <li> <p>Verify CI passes - Check that all GitHub Actions workflows are green</p> </li> <li> <p>Test installations:</p> <pre><code># Test Rust installation\ncargo install --path .\n\n# Test Python installation\npip install -e .\n</code></pre> </li> </ol>"},{"location":"releasing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"releasing/#common-issues","title":"Common Issues","text":"<ol> <li>Version mismatch - Ensure Cargo.toml and pyproject.toml versions match</li> <li>CI failures - Run <code>uv run poe all</code> locally to catch issues early</li> <li>Publishing failures - Check that secrets are correctly configured</li> </ol>"},{"location":"releasing/#release-workflow-failures","title":"Release Workflow Failures","text":"<p>If the release workflow fails:</p> <ol> <li>Check the GitHub Actions logs for specific errors</li> <li>Verify all secrets are configured correctly</li> <li>Ensure you have the necessary permissions on crates.io and PyPI</li> </ol>"},{"location":"releasing/#version-bumping-guidelines","title":"Version Bumping Guidelines","text":"<ul> <li>PATCH (0.0.X) - Bug fixes, documentation updates</li> <li>MINOR (0.X.0) - New features, backwards-compatible changes</li> <li>MAJOR (X.0.0) - Breaking changes (after 1.0.0)</li> </ul> <p>While in 0.x.x versions:</p> <ul> <li>Breaking changes can happen in MINOR versions</li> <li>The project is considered unstable</li> </ul>"},{"location":"releasing/#post-release-checklist","title":"Post-Release Checklist","text":"<p>After a successful release:</p> <ol> <li>Verify the release appears on:<ul> <li>GitHub releases page</li> <li>crates.io</li> <li>PyPI</li> </ul> </li> <li>Test installation from the published packages</li> <li>Update any documentation that references the version</li> <li>Announce the release if appropriate</li> </ol>"},{"location":"userguide/","title":"ISCC-SUM User Guide","text":"<p>This comprehensive guide covers all features of the <code>iscc-sum</code> command-line tool for generating and verifying ISCC (International Standard Content Code) checksums according to ISO 24138:2024.</p> <p>New to ISCC-SUM?</p> <p>If you're just getting started, check out our Quick Start Guide for a gentle introduction. This user guide covers all features in detail for when you need more advanced functionality.</p>"},{"location":"userguide/#installation","title":"Installation","text":"<p>The recommended way to install <code>iscc-sum</code> is using UV, a fast Python package manager:</p> Linux/macOSWindowsAlternative: pip <pre><code># Install UV (if not already installed)\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install iscc-sum globally\nuv tool install iscc-sum\n</code></pre> <pre><code># Install UV (if not already installed)\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n\n# Install iscc-sum globally\nuv tool install iscc-sum\n</code></pre> <pre><code>pip install iscc-sum\n</code></pre> <p>Verify the installation:</p> <pre><code>iscc-sum --version\n</code></pre> Installation Troubleshooting <p>\"Command not found\" after installation</p> <ul> <li>Close and reopen your terminal to refresh the PATH</li> <li>Check if UV's bin directory is in your PATH:<ul> <li>Linux/macOS: <code>~/.local/bin</code></li> <li>Windows: <code>%USERPROFILE%\\.local\\bin</code></li> </ul> </li> </ul> <p>Permission errors during installation</p> <ul> <li>Don't use <code>sudo</code> with UV</li> <li>UV installs tools in your user directory by default</li> </ul>"},{"location":"userguide/#core-features","title":"Core Features","text":""},{"location":"userguide/#basic-checksum-generation","title":"Basic Checksum Generation","text":"<p>Generate ISCC checksums for your files with simple commands:</p>"},{"location":"userguide/#single-file","title":"Single File","text":"<pre><code>iscc-sum document.pdf\n</code></pre> <p>Output:</p> <pre><code>ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *document.pdf\n</code></pre> <p>Output Format</p> <p>The default output format follows GNU coreutils conventions:</p> <ul> <li><code>ISCC:...</code> - The ISCC checksum</li> <li><code>*</code> - Binary mode indicator (always present)</li> <li><code>filename</code> - Path to the file</li> </ul>"},{"location":"userguide/#multiple-files","title":"Multiple Files","text":"<p>Process multiple files in one command:</p> <pre><code>iscc-sum file1.txt file2.pdf image.jpg\n</code></pre> <p>Output:</p> <pre><code>ISCC:KACWSO4JFISTQSRVMCWDRBTS5AX5E2XD7H3PRFMBTNGBD6PZQJNQ *file1.txt\nISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *file2.pdf\nISCC:KACSUH2DZ5SLMG4YGH3LUW7J7ERVQZFMV5LYS4KAHCUSM6EPUAFA *image.jpg\n</code></pre>"},{"location":"userguide/#directory-processing","title":"Directory Processing","text":"<p>Process all files in a directory recursively:</p> <pre><code>iscc-sum /path/to/directory\n</code></pre> <p>This will:</p> <ul> <li> Recursively find all files</li> <li> Process them in deterministic order</li> <li> Respect <code>.isccignore</code> patterns</li> </ul> <p>Deterministic Ordering</p> <p>Directory traversal uses the TREEWALK-ISCC algorithm, ensuring consistent output across different platforms and filesystems.</p>"},{"location":"userguide/#standard-input","title":"Standard Input","text":"<p>Process data from pipes or redirects:</p> <pre><code>echo \"Hello, World!\" | iscc-sum\n</code></pre> <p>Or from a file:</p> <pre><code>iscc-sum &lt; document.txt\n</code></pre>"},{"location":"userguide/#output-formats","title":"Output Formats","text":"<p>ISCC-SUM supports multiple output formats for different use cases:</p>"},{"location":"userguide/#default-format","title":"Default Format","text":"<p>The standard format compatible with GNU coreutils tools:</p> <pre><code>iscc-sum file.txt\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *file.txt\n</code></pre>"},{"location":"userguide/#bsd-style-format","title":"BSD-Style Format","text":"<p>Use <code>--tag</code> for BSD-style output:</p> <pre><code>iscc-sum --tag file.txt\n# ISCC-SUM (file.txt) = ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY\n</code></pre>"},{"location":"userguide/#narrow-format-128-bit","title":"Narrow Format (128-bit)","text":"<p>For ISO 24138:2024 conformant 128-bit ISCCs:</p> <pre><code>iscc-sum --narrow file.txt\n# ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HU *file.txt\n</code></pre> <p>Narrow vs Extended Format</p> <ul> <li>Narrow (128-bit): Shorter, ISO standard compliant</li> <li>Extended (256-bit): Default, more collision resistant</li> </ul>"},{"location":"userguide/#component-display","title":"Component Display","text":"<p>Show individual Data-Code and Instance-Code components:</p> <pre><code>iscc-sum --units file.txt\n</code></pre> <p>Output:</p> <pre><code>ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *file.txt\n  ISCC:EAAW4BQTJSTJSHAI27AJSAGMGHNUKSKRTK3E6OZ5CXUS57SWQZXJQ\n  ISCC:IABXF3ZHYL6O6PM5P2HGV677CS3RBHINZSXEJCITE3WNOTQ2CYXRA\n</code></pre> <p>The components are:</p> <ul> <li>First line: Combined ISCC checksum</li> <li>Second line: Data-Code (content similarity)</li> <li>Third line: Instance-Code (exact match)</li> </ul>"},{"location":"userguide/#zero-terminated-output","title":"Zero-Terminated Output","text":"<p>For script processing, use NUL-terminated lines:</p> <pre><code>iscc-sum -z file1.txt file2.txt | xargs -0 -n1 echo \"Processing:\"\n</code></pre>"},{"location":"userguide/#cross-platform-checksum-files","title":"Cross-Platform Checksum Files","text":"<p>New Feature</p> <p>The <code>-o/--output</code> option ensures consistent checksum files across platforms.</p> <p>Create portable checksum files that work on Windows, Linux, and macOS:</p> <pre><code>iscc-sum -o checksums.txt *.pdf\n</code></pre> <p>This ensures:</p> <ul> <li> UTF-8 encoding</li> <li> LF line endings (Unix-style)</li> <li> Cross-platform compatibility</li> </ul>"},{"location":"userguide/#verification-mode","title":"Verification Mode","text":"<p>Verify file integrity by checking against saved checksums:</p>"},{"location":"userguide/#creating-checksum-files","title":"Creating Checksum Files","text":"<p>Save checksums for later verification:</p> <pre><code># Save to a file (cross-platform safe)\niscc-sum -o project-checksums.txt src/**/*.py\n\n# Or use shell redirection (platform-specific line endings)\niscc-sum *.doc &gt; checksums.txt\n</code></pre>"},{"location":"userguide/#basic-verification","title":"Basic Verification","text":"<p>Check if files match their saved checksums:</p> <pre><code>iscc-sum -c project-checksums.txt\n</code></pre> <p>Output:</p> <pre><code>src/main.py: OK\nsrc/utils.py: OK\nsrc/config.py: FAILED\niscc-sum: WARNING: 1 computed checksum did NOT match\n</code></pre>"},{"location":"userguide/#verification-options","title":"Verification Options","text":""},{"location":"userguide/#quiet-mode","title":"Quiet Mode","text":"<p>Only show failures:</p> <pre><code>iscc-sum -c -q checksums.txt\n# Only outputs failed files\n</code></pre>"},{"location":"userguide/#status-mode","title":"Status Mode","text":"<p>Silent operation, check exit code only:</p> <pre><code>iscc-sum -c --status checksums.txt\necho $?  # 0 if all OK, 1 if any failures\n</code></pre> <p>Perfect for scripts:</p> <pre><code>if iscc-sum -c --status checksums.txt; then\n    echo \"All files verified successfully\"\nelse\n    echo \"Verification failed!\"\nfi\n</code></pre>"},{"location":"userguide/#strict-mode","title":"Strict Mode","text":"<p>Exit immediately on format errors:</p> <pre><code>iscc-sum -c --strict checksums.txt\n</code></pre>"},{"location":"userguide/#format-warnings","title":"Format Warnings","text":"<p>Show warnings about improperly formatted lines:</p> <pre><code>iscc-sum -c -w checksums.txt\n</code></pre>"},{"location":"userguide/#similarity-detection","title":"Similarity Detection","text":"<p>Unique Feature</p> <p>Unlike traditional checksums, ISCC enables finding similar files through its Data-Code component.</p>"},{"location":"userguide/#how-it-works","title":"How It Works","text":"<p>ISCC's Data-Code captures content structure, allowing similarity comparison:</p> <ul> <li>Similar content \u2192 Similar Data-Codes</li> <li>Measured by Hamming distance</li> <li>Default threshold: 12 bits difference</li> </ul>"},{"location":"userguide/#finding-similar-files","title":"Finding Similar Files","text":"<p>Group files by content similarity:</p> <pre><code>iscc-sum --similar *.txt\n</code></pre> <p>Output:</p> <pre><code>document_v1.txt\n  ~08 document_v2.txt\n  ~12 document_draft.txt\n\nreport_2024.txt\n  ~06 report_2024_final.txt\n</code></pre> <p>The numbers (e.g., <code>~08</code>) indicate bit differences - lower means more similar.</p>"},{"location":"userguide/#adjusting-similarity-threshold","title":"Adjusting Similarity Threshold","text":"<p>Find more similar files with a higher threshold:</p> <pre><code>iscc-sum --similar --threshold 20 *.jpg\n</code></pre> <p>Or find only very similar files:</p> <pre><code>iscc-sum --similar --threshold 5 *.pdf\n</code></pre> <p>Choosing Thresholds</p> <ul> <li>0-5: Nearly identical files</li> <li>6-12: Likely similar content (default)</li> <li>13-20: Probably somewhat similar</li> </ul>"},{"location":"userguide/#similarity-with-other-options","title":"Similarity with Other Options","text":"<p>Combine similarity detection with other formats:</p> <pre><code># BSD-style output with similarity grouping\niscc-sum --similar --tag *.doc\n\n# Narrow format similarity\niscc-sum --similar --narrow --threshold 8 images/*\n</code></pre>"},{"location":"userguide/#tree-mode","title":"Tree Mode","text":"<p>Generate a single checksum for an entire directory structure:</p> <pre><code>iscc-sum --tree my-project/\n</code></pre> <p>Output:</p> <pre><code>ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2XHGQY *my-project/\n</code></pre> <p>Directory Indicator</p> <p>The trailing slash (<code>/</code>) indicates this is a directory checksum, not a file.</p>"},{"location":"userguide/#what-tree-mode-captures","title":"What Tree Mode Captures","text":"<p>Tree mode creates a composite checksum of:</p> <ul> <li> All file contents</li> <li> Directory structure</li> <li> File ordering</li> <li> Respects <code>.isccignore</code> patterns</li> </ul>"},{"location":"userguide/#use-cases-for-tree-mode","title":"Use Cases for Tree Mode","text":"Version SnapshotsArchive VerificationCross-System Sync <pre><code># Create a snapshot before changes\niscc-sum --tree project/ &gt; snapshot-before.txt\n\n# After changes, verify what changed\niscc-sum --tree project/ &gt; snapshot-after.txt\ndiff snapshot-before.txt snapshot-after.txt\n</code></pre> <pre><code># Before archiving\niscc-sum --tree data/ -o archive-checksum.txt\n\n# After extraction\niscc-sum -c archive-checksum.txt\n</code></pre> <pre><code># On source system\niscc-sum --tree /source/dir/ | ssh user@target \"cat &gt; checksum.txt\"\n\n# On target system\niscc-sum -c checksum.txt\n</code></pre>"},{"location":"userguide/#practical-examples","title":"Practical Examples","text":""},{"location":"userguide/#example-build-reproducibility","title":"Example: Build Reproducibility","text":"<p>Ensure your build outputs are consistent:</p> <pre><code># Before build\niscc-sum --tree src/ -o src-checksum.txt\n\n# After build\nmake clean &amp;&amp; make\n\n# Verify source unchanged\niscc-sum -c src-checksum.txt\n\n# Check build outputs\niscc-sum --tree build/ -o build-checksum.txt\n</code></pre>"},{"location":"userguide/#example-finding-duplicate-images","title":"Example: Finding Duplicate Images","text":"<p>Identify duplicate or near-duplicate images:</p> <pre><code># Find very similar images\niscc-sum --similar --threshold 5 photos/*.jpg &gt; duplicates.txt\n\n# Review groups\ngrep -B1 \"~0[0-5]\" duplicates.txt\n</code></pre>"},{"location":"userguide/#example-cross-platform-file-transfer","title":"Example: Cross-Platform File Transfer","text":"<p>Ensure files transfer correctly between systems:</p> On Source SystemOn Target System <pre><code># Create portable checksum file\niscc-sum -o transfer-manifest.txt files/*\n\n# Transfer files and manifest\nrsync -av files/ transfer-manifest.txt remote:/destination/\n</code></pre> <pre><code># Verify all files transferred correctly\ncd /destination\niscc-sum -c transfer-manifest.txt\n</code></pre>"},{"location":"userguide/#example-continuous-integration","title":"Example: Continuous Integration","text":"<p>Add file integrity checks to your CI pipeline:</p> <pre><code># .github/workflows/verify.yml\nsteps:\n  - name: Checkout\n    uses: actions/checkout@v4\n\n  - name: Verify test fixtures\n    run: |\n      iscc-sum -c tests/fixtures/checksums.txt --status || {\n        echo \"Test fixtures corrupted!\"\n        exit 1\n      }\n</code></pre>"},{"location":"userguide/#command-reference","title":"Command Reference","text":""},{"location":"userguide/#synopsis","title":"Synopsis","text":"<pre><code>iscc-sum [OPTION]... [FILE|DIR]...\n</code></pre>"},{"location":"userguide/#options-reference","title":"Options Reference","text":"Option Short Description <code>--help</code> Show help message and exit <code>--version</code> Show version number and exit Generation <code>--narrow</code> Generate 128-bit checksums (ISO standard) <code>--tag</code> Use BSD-style output format <code>--units</code> Show Data-Code and Instance-Code components <code>--zero</code> <code>-z</code> End lines with NUL instead of newline <code>--output FILE</code> <code>-o</code> Write to FILE with consistent encoding Verification <code>--check</code> <code>-c</code> Read checksums and verify files <code>--quiet</code> <code>-q</code> Don't print OK for each file <code>--status</code> Don't output anything, exit code only <code>--warn</code> <code>-w</code> Warn about format errors <code>--strict</code> Exit on first format error Advanced <code>--similar</code> Find files with similar content <code>--threshold N</code> Hamming distance for similarity (default: 12) <code>--tree</code> <code>-t</code> Single checksum for entire directory"},{"location":"userguide/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success - all operations completed successfully 1 Verification failure - one or more files failed 2 Error - I/O error, invalid format, or other issue"},{"location":"userguide/#performance-tips","title":"Performance Tips","text":"<p>Performance Optimization</p> <ul> <li>Large Files: Processed in 2MB chunks for memory efficiency</li> <li>Many Files: Use directory arguments instead of wildcards for better performance</li> <li>Network Storage: Create checksums locally, then transfer for faster processing</li> </ul>"},{"location":"userguide/#troubleshooting","title":"Troubleshooting","text":"Common Issues and Solutions <p>\"No such file or directory\"</p> <ul> <li>Check file path spelling and case (especially on Linux/macOS)</li> <li>Use tab completion to verify paths</li> <li>For spaces in names: use quotes or escape with backslash</li> </ul> <p>\"Permission denied\"</p> <ul> <li>Check file permissions: <code>ls -l filename</code></li> <li>For system files, consider if you really need to checksum them</li> <li>Never use <code>sudo</code> unless absolutely necessary</li> </ul> <p>Checksum mismatches</p> <ul> <li>Verify the file hasn't been modified: check timestamps</li> <li>Ensure consistent line endings (use <code>-o</code> option)</li> <li>Check for hidden characters in filenames</li> </ul> <p>Performance issues</p> <ul> <li>For many small files, process directory instead of wildcards</li> <li>Use <code>--tree</code> mode for full directory comparison</li> <li>Consider <code>--narrow</code> format for faster processing</li> </ul>"},{"location":"userguide/#see-also","title":"See Also","text":"<ul> <li>Quick Start Guide - Getting started with ISCC-SUM</li> <li>Developer Guide - Using ISCC-SUM in your Python code</li> <li>Specifications - Technical details and standards</li> <li>GitHub Repository - Source code and issue tracking</li> </ul>"},{"location":"specifications/","title":"ISCC Extensions for the BioCodes Project","text":""},{"location":"specifications/#introduction","title":"Introduction","text":"<p>The BioCodes project addresses critical challenges in scientific data management, particularly in the bioimaging domain where researchers work with large, complex datasets stored in hierarchical formats. This collection of proposed extensions for the International Standard Content Code (ISO 24138:2024) provides essential infrastructure for reproducible scientific workflows, cross-platform data verification, and persistent content identification.</p> <p>These specifications emerged from real-world needs in managing container formats and large-scale imaging data, where traditional identification approaches fail due to platform-dependent file ordering, storage-agnostic requirements, and the need for both granular and composite identification and verification. Each extension builds upon ISO 24138:2024 to create a comprehensive solution for scientific data integrity.</p>"},{"location":"specifications/#relevance-for-zarrome-ngff","title":"Relevance for Zarr/OME-NGFF","text":"<p>The bioimaging community's adoption of Zarr-based formats like OME-NGFF makes these extensions particularly crucial. These formats store N-dimensional arrays as hierarchical directory structures containing large numbers of chunk files, creating unique challenges for identification that our specifications address.</p> <ol> <li> <p>Cross-platform Reproducibility: Zarr hierarchies yield different traversal orders on different systems,     breaking checksums and making verification unreliable. TreeWalk ensures identical ordering across all     platforms and storage backends.</p> </li> <li> <p>Scalable Integrity Verification: Large-scale OME-NGFF datasets require efficient, incremental     checksumming. The specified APIs support progress tracking and resumable verification.</p> </li> <li> <p>Enhanced Collision Resistance: Scientific datasets require strong guarantees against hash collisions. The     Wide subtype's 256-bit digest provides cryptographic-strength uniqueness.</p> </li> <li> <p>Storage-Agnostic Identification: Whether Zarr data lives in local filesystems, cloud buckets, or is     packaged for distribution, these specifications enable consistent content identifiers.</p> </li> </ol>"},{"location":"specifications/#proposed-iscc-extensions","title":"Proposed ISCC Extensions","text":""},{"location":"specifications/#1-treewalk","title":"1. TREEWALK","text":"<p>Storage Agnostic Deterministic Incremental Tree Traversal</p> <p>TreeWalk solves the fundamental problem of inconsistent file ordering across platforms and storage systems. This algorithm ensures identical traversal order whether data resides on Linux, Windows, S3, or within ZIP archives\u2014essential for reproducible content identification.</p> <p>The specification includes:</p> <ul> <li>TreeWalk-Base: Core deterministic traversal algorithm</li> <li>TreeWalk-Ignore: Gitignore-style pattern filtering</li> <li>TreeWalk-ISCC: ISCC-specific pattern filtering</li> </ul> <p>Read the TreeWalk Specification \u2192</p>"},{"location":"specifications/#2-iscc-subtype-wide","title":"2. ISCC SUBTYPE WIDE","text":"<p>ISCC-CODEs support various composites of individual 64-bit ISCC-UNITs. Two of those ISCC-UNITs stand out for being media type agnostic and fully deterministic:</p> <ul> <li>Data-Code - A similarity-preserving hash over raw data</li> <li>Instance-Code - A fast checksum or cryptographic hash (blake3)</li> </ul> <p>The propoposed ISCC SubType WIDE extends the composite to preserve full 128-bit digests per ISCC-UNIT, providing enhanced collision resistance and security.</p> <p>Read the ISCC SubType WIDE Specification \u2192</p>"},{"location":"specifications/#3-iscc-checksum-api","title":"3. ISCC CHECKSUM API","text":"<p>A command-line interface specification that mirrors familiar tools like <code>md5sum</code> and <code>sha256sum</code>, making ISCC adoption seamless for existing workflows. The API supports:</p> <ul> <li>Standard Unix-style checksum file formats</li> <li>Incremental verification of large datasets</li> <li>Integration with existing toolchains</li> </ul> <p>Read the CLI Checksum API Specification \u2192</p>"},{"location":"specifications/#impact","title":"Impact","text":"<p>Without these extensions, two researchers cannot reliably verify they have identical Zarr datasets\u2014file listing order varies by OS, locale, and storage backend. Standard checksums fail when the same data produces different hashes on different systems. These specifications make reproducible computational science possible by ensuring that content-based identifiers remain stable across all environments where scientific data is stored, processed, and shared.</p>"},{"location":"specifications/#current-status","title":"Current Status","text":"<ul> <li>iscc-sum: Initial High-performance reference implementation in Rust with Python bindings</li> <li>Active Development: Specifications and implementations are in draft status</li> <li>Community Feedback: Specifications and implementations are refined based on community feedback</li> </ul>"},{"location":"specifications/#future-directions","title":"Future Directions","text":"<p>Once stabelized these specifications will eventually be submitted as official ISCC Improvement Proposals (IEPs) at https://ieps.iscc.codes/, ensuring long-term stability and broad ecosystem support. The BioCodes project continues to identify additional requirements from the bioimaging community that may lead to further extensions.</p>"},{"location":"specifications/cli/","title":"ISCC-SUM CLI Specification","text":""},{"location":"specifications/cli/#command-synopsis","title":"Command Synopsis","text":"<pre><code>iscc-sum [OPTION]... [FILE|DIR]...\n</code></pre>"},{"location":"specifications/cli/#description","title":"Description","text":"<p>The <code>iscc-sum</code> command computes ISCC (International Standard Content Code) checksums for files and directories. Each checksum consists of a 2-byte self-describing header followed by a composite of Data-Code and Instance-Code (BLAKE3) components. All files are processed as binary data.</p> <p>Unlike traditional checksum tools that only verify exact matches, <code>iscc-sum</code> enables similarity detection through the Data-Code component. Files (or directories) with similar content will have similar Data-Codes, allowing similarity matching based on hamming distance.</p> <p>When given directories as arguments, <code>iscc-sum</code> processes all files recursively within them in a deterministig order using the <code>TREEWALK-ISCC</code> algorithm to ensure consistent output across platforms. Files are filtered according to <code>.isccignore</code> rules if present.</p>"},{"location":"specifications/cli/#options","title":"Options","text":""},{"location":"specifications/cli/#core-options-gnu-coreutils-compatible","title":"Core Options (GNU coreutils compatible)","text":"<ul> <li><code>-c, --check</code> - Read checksums from FILEs and verify them</li> <li><code>-o, --output FILE</code> - Write checksums to FILE instead of stdout (ensures UTF-8, LF encoding)</li> <li><code>--tag</code> - Create a BSD-style checksum output</li> <li><code>-z, --zero</code> - End each output line with NUL, not newline</li> <li><code>--help</code> - Display help message and exit</li> <li><code>--version</code> - Output version information and exit</li> </ul>"},{"location":"specifications/cli/#verification-options","title":"Verification Options","text":"<ul> <li><code>-q, --quiet</code> - Don't print OK for successfully verified files</li> <li><code>--status</code> - Don't output anything, status code shows success</li> <li><code>-w, --warn</code> - Warn about improperly formatted checksum lines</li> <li><code>--strict</code> - Exit non-zero for improperly formatted checksum lines</li> </ul>"},{"location":"specifications/cli/#iscc-specific-options","title":"ISCC-Specific Options","text":"<ul> <li><code>--narrow</code> - Generate narrow format (2\u00d764-bit) conformant with ISO 24138:2024 (default: 2\u00d7128-bit extended     format)</li> <li><code>--units</code> - Include individual Data-Code and Instance-Code units in output (verification mode: ignored)</li> </ul>"},{"location":"specifications/cli/#similarity-matching-options","title":"Similarity Matching Options","text":"<ul> <li><code>--similar</code> - Group files by similarity based on Data-Code hamming distance<ul> <li>Cannot be used with <code>-c/--check</code></li> <li>Requires at least 2 files to compare</li> </ul> </li> <li><code>--threshold &lt;N&gt;</code> - Maximum hamming distance for similarity matching (default: 12)<ul> <li>Hamming distance is calculated on Data-Code bits: 128 bits (extended) or 64 bits (narrow)</li> </ul> </li> </ul>"},{"location":"specifications/cli/#directory-processing-options","title":"Directory Processing Options","text":"<ul> <li><code>-t, --tree</code> - Process directory as a single unit with combined checksum (requires single directory argument)</li> </ul>"},{"location":"specifications/cli/#output-format","title":"Output Format","text":""},{"location":"specifications/cli/#default-format-untagged","title":"Default Format (untagged)","text":"<pre><code>&lt;ISCC_CHECKSUM&gt; *&lt;FILENAME&gt;\n</code></pre> <ul> <li><code>&lt;ISCC_CHECKSUM&gt;</code>: ISCC code starting with \"ISCC:\" followed by base32 encoded value</li> <li><code>*</code>: Binary mode indicator (always present as iscc-sum only processes binary data)</li> <li><code>&lt;FILENAME&gt;</code>: Path to the file</li> </ul> <p>Example:</p> <pre><code>ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2M5AEGQY *document.pdf\n</code></pre>"},{"location":"specifications/cli/#bsd-tagged-format-tag","title":"BSD-Tagged Format (--tag)","text":"<pre><code>ISCC-SUM (&lt;FILENAME&gt;) = &lt;ISCC_CHECKSUM&gt;\n</code></pre> <p>Example:</p> <pre><code>ISCC-SUM (document.pdf) = ISCC:KACYPXW445FTYNJ3CYSXHAFJMA2HUWULUNRFE3BLHRSCXYH2M5AEGQY\n</code></pre>"},{"location":"specifications/cli/#extended-output-with-units-units","title":"Extended Output with Units (--units)","text":"<p>When <code>--units</code> is specified, output additional lines with component codes:</p> <pre><code>&lt;ISCC_CHECKSUM&gt; *&lt;FILENAME&gt;\n  Data-Code: &lt;DATA_CODE_ISCC&gt;\n  Instance-Code: &lt;INSTANCE_CODE_ISCC&gt;\n</code></pre>"},{"location":"specifications/cli/#similarity-matching-output-similar","title":"Similarity Matching Output (--similar)","text":"<p>Files are grouped by similarity with the first file in each group as reference:</p> <pre><code>&lt;ISCC_CHECKSUM&gt; *&lt;REFERENCE_FILE&gt;\n  0: &lt;ISCC_CHECKSUM&gt; *&lt;IDENTICAL_FILE&gt;\n  5: &lt;ISCC_CHECKSUM&gt; *&lt;SIMILAR_FILE&gt;\n  12: &lt;ISCC_CHECKSUM&gt; *&lt;SIMILAR_FILE&gt;\n\n&lt;ISCC_CHECKSUM&gt; *&lt;ANOTHER_REFERENCE_FILE&gt;\n  3: &lt;ISCC_CHECKSUM&gt; *&lt;SIMILAR_FILE&gt;\n</code></pre> <p>Numbers indicate hamming distance between Data-Code components.</p>"},{"location":"specifications/cli/#tree-mode-output-tree","title":"Tree Mode Output (--tree)","text":"<p>When processing a directory with <code>--tree</code>, output shows the directory path with a trailing slash:</p>"},{"location":"specifications/cli/#default-format","title":"Default format:","text":"<pre><code>&lt;ISCC_CHECKSUM&gt; *&lt;DIRECTORY_PATH&gt;/\n</code></pre>"},{"location":"specifications/cli/#bsd-tagged-format","title":"BSD-tagged format:","text":"<pre><code>ISCC-SUM (&lt;DIRECTORY_PATH&gt;/) = &lt;ISCC_CHECKSUM&gt;\n</code></pre> <p>The checksum represents all files in the directory processed as a single unit.</p>"},{"location":"specifications/cli/#checksum-structure","title":"Checksum Structure","text":""},{"location":"specifications/cli/#extended-format-default-256-bit","title":"Extended Format (default, 256-bit)","text":"<ul> <li>Header: 2 bytes<ul> <li>Byte 1: Main type (0101) | Sub type (0111)</li> <li>Byte 2: Version (0000) | Length (0000)</li> </ul> </li> <li>Data-Code: 128 bits (16 bytes)</li> <li>Instance-Code: 128 bits (16 bytes)</li> <li>Total: 34 bytes \u2192 ~54 characters base32</li> </ul>"},{"location":"specifications/cli/#narrow-format-narrow-128-bit","title":"Narrow Format (--narrow, 128-bit)","text":"<ul> <li>Header: 2 bytes<ul> <li>Byte 1: Main type (0101) | Sub type (0101)</li> <li>Byte 2: Version (0000) | Length (0000)</li> </ul> </li> <li>Data-Code: 64 bits (8 bytes)</li> <li>Instance-Code: 64 bits (8 bytes)</li> <li>Total: 18 bytes \u2192 ~29 characters base32</li> </ul>"},{"location":"specifications/cli/#exit-status","title":"Exit Status","text":"<ul> <li><code>0</code> - Success (all checksums matched when verifying; files processed successfully)</li> <li><code>1</code> - Verification failure (one or more checksums didn't match)</li> <li><code>2</code> - I/O or format error</li> </ul>"},{"location":"specifications/cli/#examples","title":"Examples","text":""},{"location":"specifications/cli/#generate-checksums","title":"Generate checksums","text":"<pre><code># Single file\niscc-sum document.pdf\n\n# Multiple files\niscc-sum *.txt\n\n# BSD-style output\niscc-sum --tag document.pdf\n\n# Narrow format (ISO 24138:2024)\niscc-sum --narrow document.pdf\n\n# With component units\niscc-sum --units document.pdf\n\n# Output to file (cross-platform compatible)\niscc-sum -o checksums.iscc *.txt\n</code></pre>"},{"location":"specifications/cli/#verify-checksums","title":"Verify checksums","text":"<pre><code># Verify from checksum file\niscc-sum -c checksums.txt\n\n# Quiet verification (only show failures)\niscc-sum -c --quiet checksums.txt\n\n# Silent verification (exit code only)\niscc-sum -c --status checksums.txt\n</code></pre>"},{"location":"specifications/cli/#find-similar-files","title":"Find similar files","text":"<pre><code># Group similar files\niscc-sum --similar *.jpg\n\n# Use custom similarity threshold (hamming distance)\niscc-sum --similar --threshold 20 documents/*.pdf\n\n# Find similar files in directory\niscc-sum --similar /path/to/images\n\n# Process entire directory as single unit\niscc-sum --tree /path/to/project\n\n# Generate checksums for all files in directory\niscc-sum /path/to/directory\n\n# Process directory tree and create a single checksum\niscc-sum --tree /path/to/project\n\n# BSD-style tree checksum\niscc-sum --tree --tag /path/to/project\n</code></pre>"},{"location":"specifications/cli/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>The tool MUST process all files as binary data (no text encoding/decoding)</li> <li>The tool MUST support reading from stdin when no FILE is specified</li> <li>Output MUST be deterministic for the same input</li> <li>The checksum base32 encoding MUST use RFC4648 alphabet without padding</li> <li>The tool SHOULD auto-detect checksum format when verifying</li> <li>Hamming distance MUST be calculated on the decoded bits of the Data-Code component only (excluding the     2-byte header)</li> <li>Directory traversal MUST use the <code>TREEWALK-ISCC</code> algorithm to ensure identical results across platforms.</li> <li>Tree mode (<code>--tree</code>) requires exactly one directory argument and processes all files within that directory     as a single unit, producing one combined checksum for the entire directory tree</li> <li>Tree mode checksums can be verified; the tool will automatically detect the trailing slash and process the     directory accordingly</li> <li>Checksum files MUST be UTF-8 encoded without BOM for cross-platform compatibility</li> <li>When using <code>-o/--output</code>, the tool MUST write UTF-8 with LF line endings on all platforms</li> <li>When reading checksum files with <code>--check</code>, the tool expects UTF-8 encoding</li> </ol>"},{"location":"specifications/treewalk/","title":"TREEWALK","text":"<p>Storage Agnostic Deterministic Incremental Tree Traversal</p> <p>Deterministic algorithms for traversing hierarchical structures that produces consistent, reproducible ordering across platforms and storage types.</p>"},{"location":"specifications/treewalk/#abstract","title":"Abstract","text":"<p>This specification defines a layered approach to deterministic tree traversal, consisting of a core algorithm and two standard extensions. The TREEWALK-BASE algorithm provides consistent ordering for hierarchical storage structures. The TREEWALK-IGNORE extension adds gitignore-style pattern filtering, while TREEWALK-ISCC provides domain-specific filtering for ISCC metadata. Each layer builds upon the previous, ensuring consistent cross-platform ordering while enabling progressive filtering capabilities. The specification applies to file systems, archive formats (ZIP, EPUB, DOCX), cloud storage (S3, Azure Blob), and any system with directory-like organization.</p>"},{"location":"specifications/treewalk/#status","title":"Status","text":"<p>This specification is DRAFT as of 2025-06-19.</p>"},{"location":"specifications/treewalk/#1-introduction","title":"1. Introduction","text":""},{"location":"specifications/treewalk/#11-motivation","title":"1.1 Motivation","text":"<p>Content-based identifiers and integrity verification systems require deterministic file ordering to produce consistent results across different environments. Traditional directory traversal methods yield entries in file system-dependent order, making reproducible hashing impossible. This specification solves that problem through a layered approach that separates core traversal logic from filtering concerns.</p>"},{"location":"specifications/treewalk/#12-scope","title":"1.2 Scope","text":"<p>This specification defines three algorithms:</p> <p>TREEWALK-BASE:</p> <ul> <li>Deterministic ordering of hierarchical entries</li> <li>Ignore file prioritization for early filtering opportunities</li> <li>Security considerations for reference handling</li> </ul> <p>TREEWALK-IGNORE Extension:</p> <ul> <li>Gitignore-style pattern matching</li> <li>Cascading ignore rules from root to leaf directories</li> <li>Pattern accumulation and inheritance</li> </ul> <p>TREEWALK-ISCC Extension:</p> <ul> <li>ISCC-specific pattern matching and filtering</li> <li>Built on top of TREEWALK-IGNORE functionality</li> <li>Domain-specific file exclusions</li> </ul> <p>It does NOT cover:</p> <ul> <li>Content reading or hashing algorithms</li> <li>Storage-specific authentication or access control</li> <li>Entry metadata beyond names and types</li> <li>Implementation details for specific storage systems</li> </ul>"},{"location":"specifications/treewalk/#13-notation-and-conventions","title":"1.3 Notation and Conventions","text":"<p>The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are interpreted as described in [RFC 2119] and [RFC 8174].</p>"},{"location":"specifications/treewalk/#2-terminology","title":"2. Terminology","text":"<p>Entry : A named object within a hierarchical storage system (file, directory, archive member, S3 object).</p> <p>Container : An entry that can contain other entries (directory, folder, ZIP archive, S3 prefix).</p> <p>Yield/Output : When an entry is \"yielded\" or appears in the \"output\", it means the entry path is returned to the caller. Note that containers are traversed but not yielded \u2014 only files within containers appear in output.</p> <p>NFC Normalization : Unicode Normalization Form C - a canonical form ensuring consistent representation of equivalent Unicode sequences.</p> <p>Ignore File : An entry whose name starts with \".\" and ends with \"ignore\" (e.g., .gitignore, .isccignore) containing patterns for entries to exclude.</p> <p>Reference : A storage-specific link to another entry (symbolic link, archive member reference, S3 redirect).</p>"},{"location":"specifications/treewalk/#3-architecture-overview","title":"3. Architecture Overview","text":"<p>The TREEWALK specification defines a layered architecture where each extension builds upon the previous:</p> <pre><code>graph TD\n    A[TREEWALK-BASE] --&gt; B[TREEWALK-IGNORE]\n    B --&gt; C[TREEWALK-ISCC]\n    B --&gt; D[Custom Extensions]\n\n    A -.- E[Deterministic Ordering&lt;br/&gt;Ignore-File Priority&lt;br/&gt;Reference Handling]\n    B -.- F[Pattern Matching&lt;br/&gt;Cascading Rules&lt;br/&gt;Progressive Filtering]\n    C -.- G[ISCC Metadata Filtering&lt;br/&gt;.isccignore Support]\n    D -.- H[Domain-specific Rules]</code></pre> <p>Each layer maintains the core guarantees while adding specific functionality:</p> <ul> <li>TREEWALK-BASE: Provides deterministic ordering across all platforms</li> <li>TREEWALK-IGNORE: Adds configurable filtering with pattern inheritance</li> <li>TREEWALK-ISCC: Implements ISCC-specific requirements</li> <li>Custom Extensions: Enable domain-specific adaptations</li> </ul>"},{"location":"specifications/treewalk/#4-core-algorithm-specification","title":"4. Core Algorithm Specification","text":""},{"location":"specifications/treewalk/#41-entry-ordering","title":"4.1 Entry Ordering","text":"<p>Quick Reference</p> <p>Sort entries by NFC-normalized UTF-8 encoded names</p> <p>All directory entries MUST be sorted using the following algorithm:</p> <ol> <li>Apply Unicode NFC normalization to each entry name</li> <li>Encode the normalized name as UTF-8</li> <li>Sort entries by comparing the resulting byte sequences lexicographically</li> </ol> <p>When multiple entries have identical names after NFC normalization, implementations MUST yield all such entries sorted by lexicographically comparing their original, pre-normalization UTF-8 encoded byte sequences as a tie-breaker. This ensures deterministic output even when storage systems allow multiple entries with equivalent names.</p> <p>Warning</p> <p>Some storage systems (e.g., case-insensitive filesystems) may prevent creation of entries with names that differ only in case or normalization. In such cases, only the accessible entry will be yielded.</p>"},{"location":"specifications/treewalk/#example","title":"Example","text":"<p>Given entries: [\"caf\u00e9\", \"caffe\", \"Caf\u00e9\"]</p> <p>After NFC normalization and UTF-8 encoding, the sorted order is:</p> <ul> <li>\"Caf\u00e9\" (capital C sorts before lowercase)</li> <li>\"caf\u00e9\"</li> <li>\"caffe\"</li> </ul>"},{"location":"specifications/treewalk/#why-deterministic-duplicate-handling","title":"Why deterministic duplicate handling?","text":"<p>When entries have identical normalized names, we yield all of them in a deterministic order based on their original byte sequences to ensure consistent output across implementations. This approach:</p> <ul> <li>Preserves information: No entries are silently dropped</li> <li>Maintains determinism: The same storage state always produces the same output</li> <li>Respects storage capabilities: Systems that prevent duplicates naturally have none to yield</li> <li>Enables verification: Consumers can detect and handle duplicates as needed</li> </ul>"},{"location":"specifications/treewalk/#42-treewalk-base-algorithm","title":"4.2 TREEWALK-BASE Algorithm","text":"<p>The base algorithm MUST yield entries in depth-first order following these rules:</p> <ol> <li> <p>Process each container: For each directory/container in the traversal:</p> <ul> <li>Ignore files first - Yield files matching pattern <code>.*ignore</code> (e.g., .gitignore, .npmignore) in sorted     order</li> <li>Regular files second - Yield all other files in sorted order</li> <li>Recurse into sub-containers - Process subdirectories in sorted order</li> </ul> </li> <li> <p>Directory representation: Containers (directories) themselves MUST NOT appear in the output. Only     files within containers are yielded. The algorithm traverses into directories but does not yield them as     entries.</p> </li> </ol> <p>Note</p> <p>This ordering ensures ignore files are discovered and yielded before the regular files they might filter, enabling extensions to process filtering rules early.</p> <p>The base algorithm itself MUST NOT process ignore file contents or apply filtering - it only ensures deterministic ordering with ignore file prioritization.</p>"},{"location":"specifications/treewalk/#43-reference-handling","title":"4.3 Reference Handling","text":"<p>The algorithm MUST NOT follow references when:</p> <ul> <li>Determining if an entry is a regular entry or container</li> <li>Recursing into sub-containers</li> </ul> <p>References (symbolic links, redirects) MUST NOT appear in traversal output AND MUST NOT be followed.</p>"},{"location":"specifications/treewalk/#5-treewalk-ignore-extension","title":"5. TREEWALK-IGNORE Extension","text":""},{"location":"specifications/treewalk/#51-overview","title":"5.1 Overview","text":"<p>The TREEWALK-IGNORE extension adds gitignore-style pattern filtering to the base algorithm. It maintains the same deterministic ordering while progressively filtering entries based on accumulated patterns.</p>"},{"location":"specifications/treewalk/#52-pattern-processing","title":"5.2 Pattern Processing","text":"<p>When using TREEWALK-IGNORE:</p> <ol> <li>The implementation specifies which ignore file to process (e.g., <code>.gitignore</code> OR <code>.npmignore</code>)</li> <li>Check for the specified ignore file in each directory</li> <li>Parse patterns using gitignore-style syntax</li> <li>Accumulate patterns from root to current directory</li> <li>Apply patterns to filter files and control directory traversal</li> </ol>"},{"location":"specifications/treewalk/#directory-filtering","title":"Directory Filtering","text":"<p>Since directories are not yielded as output entries, directory patterns control traversal:</p> <ul> <li>If a directory matches an ignore pattern, the algorithm MUST NOT recurse into it</li> <li>This prevents all files within that directory from appearing in the output</li> <li>Directory patterns MUST be checked with a trailing \"/\" to ensure proper matching</li> </ul> <p>Warning</p> <p>A pattern like <code>temp/</code> prevents traversal into any directory named \"temp\", effectively excluding all files within it from the output</p>"},{"location":"specifications/treewalk/#pattern-matching-rules","title":"Pattern Matching Rules","text":"<ul> <li>Pattern matching MUST be case-sensitive</li> <li>Only one ignore file type is processed per traversal (specified by the implementation)</li> <li>Later patterns have higher precedence than earlier patterns within the same file</li> <li>Child directory patterns have higher precedence than parent directory patterns</li> <li>Patterns from child directories override patterns from parent directories</li> </ul>"},{"location":"specifications/treewalk/#53-example-with-gitignore","title":"5.3 Example with .gitignore","text":"<pre><code>repo/\n\u251c\u2500\u2500 .gitignore (contains: *.log, temp/)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.py\n\u2502   \u2514\u2500\u2500 debug.log\n\u2514\u2500\u2500 temp/\n    \u2514\u2500\u2500 cache.dat\n\nYields only:\n- repo/.gitignore\n- repo/src/main.py\n</code></pre> <p>Note</p> <p>The ignore file itself is included in the output (unless excluded by a parent ignore file)</p>"},{"location":"specifications/treewalk/#6-treewalk-iscc-extension","title":"6. TREEWALK-ISCC Extension","text":""},{"location":"specifications/treewalk/#61-overview","title":"6.1 Overview","text":"<p>The TREEWALK-ISCC extension provides ISCC-specific filtering on top of TREEWALK-IGNORE. It automatically filters metadata files while respecting <code>.isccignore</code> patterns.</p>"},{"location":"specifications/treewalk/#62-automatic-exclusions","title":"6.2 Automatic Exclusions","text":"<p>TREEWALK-ISCC MUST exclude:</p> <ul> <li>Files ending with <code>.iscc.json</code> (ISCC metadata files)</li> <li>Any patterns specified in <code>.isccignore</code> files</li> </ul>"},{"location":"specifications/treewalk/#63-implementation","title":"6.3 Implementation","text":"<p>TREEWALK-ISCC is implemented as:</p> <ol> <li>Apply TREEWALK-IGNORE with <code>.isccignore</code> as the ignore file name</li> <li>Additionally filter out files ending with <code>.iscc.json</code></li> </ol> <p>This layered approach ensures consistent behavior while adding domain-specific rules.</p> <p>Note</p> <p>The automatic exclusion of <code>.iscc.json</code> files cannot be overridden by <code>.isccignore</code> patterns. These files are always excluded, even if <code>.isccignore</code> contains patterns that would otherwise include them.</p>"},{"location":"specifications/treewalk/#7-implementation-guidance","title":"7. Implementation Guidance","text":""},{"location":"specifications/treewalk/#71-storage-system-adaptation","title":"7.1 Storage System Adaptation","text":""},{"location":"specifications/treewalk/#file-systems","title":"File Systems","text":"<ul> <li>Use native directory listing APIs (e.g., <code>os.scandir()</code>)</li> <li>Filter symbolic links during initial scan</li> <li>Resolve paths to absolute form before traversal</li> <li>On Windows, handle drive roots (e.g., <code>C:\\</code>) as valid starting points</li> </ul>"},{"location":"specifications/treewalk/#archive-formats-zip-epub-docx","title":"Archive Formats (ZIP, EPUB, DOCX)","text":"<ul> <li>Treat archive members as entries</li> <li>Use \"/\" as universal path separator</li> <li>Process nested archives as sub-containers</li> <li>Apply the same NFC normalization to member names</li> </ul>"},{"location":"specifications/treewalk/#cloud-storage-s3-azure-blob","title":"Cloud Storage (S3, Azure Blob)","text":"<ul> <li>Use prefix-based queries for \"directory\" listing</li> <li>Treat key prefixes ending with \"/\" as containers</li> <li>Batch API calls for efficiency</li> <li>Skip zero-byte objects with keys ending in \"/\" (S3 directory markers)</li> </ul>"},{"location":"specifications/treewalk/#72-path-representation","title":"7.2 Path Representation","text":"<ul> <li>Use forward slash (/) as universal path separator</li> <li>Calculate relative paths from traversal root</li> <li>Apply NFC normalization before any path operations</li> </ul>"},{"location":"specifications/treewalk/#73-security-considerations","title":"7.3 Security Considerations","text":"<ul> <li>MUST validate that all paths remain within the traversal root</li> <li>MUST NOT follow references to prevent traversal attacks</li> <li>SHOULD implement depth limits for deeply nested structures</li> <li>SHOULD enforce size limits when processing archives</li> </ul>"},{"location":"specifications/treewalk/#8-extensibility","title":"8. Extensibility","text":""},{"location":"specifications/treewalk/#81-custom-extensions","title":"8.1 Custom Extensions","text":"<p>Implementations MAY create additional extensions following the layered pattern:</p> <ol> <li>Build on top of existing layers (Base \u2192 Ignore \u2192 Domain-specific)</li> <li>Maintain deterministic ordering guarantees</li> <li>Document extension-specific behavior clearly</li> </ol>"},{"location":"specifications/treewalk/#82-custom-ignore-files","title":"8.2 Custom Ignore Files","text":"<p>TREEWALK-IGNORE implementations MAY support different ignore file names by allowing the caller to specify which ignore file to process:</p> <ul> <li><code>.gitignore</code> - Git-style ignores</li> <li><code>.npmignore</code> - NPM-style ignores</li> <li><code>.isccignore</code> - ISCC-specific ignores</li> <li><code>.customignore</code> - Domain-specific ignores</li> </ul> <p>Note</p> <p>Each traversal processes only one type of ignore file as specified by the implementation or caller</p>"},{"location":"specifications/treewalk/#9-test-vectors","title":"9. Test Vectors","text":"<p>Implementations MUST produce identical ordering for these test cases:</p>"},{"location":"specifications/treewalk/#91-treewalk-base-tests","title":"9.1 TREEWALK-BASE Tests","text":""},{"location":"specifications/treewalk/#test-case-1-unicode-normalization","title":"Test Case 1: Unicode Normalization","text":"<p>Structure:</p> <pre><code>  - path: Caf\u00e9.txt       # NFC form (U+00E9)\n  - path: Cafe\u0301.txt      # NFD form (U+0065 U+0301)\n  - path: caf\u00e9.txt       # NFC form (U+00E9)\n  - path: caffe.txt\n</code></pre> <p>Expected (TREEWALK-BASE):</p> <pre><code>  - test_dir/Cafe\u0301.txt      # NFD form (comes first due to byte ordering)\n  - test_dir/Caf\u00e9.txt       # NFC form\n  - test_dir/caffe.txt\n  - test_dir/caf\u00e9.txt\n</code></pre> <p>Note</p> <p>On case-insensitive filesystems, only one of \"Caf\u00e9.txt\" or \"caf\u00e9.txt\" may be created, resulting in fewer entries in the output.</p>"},{"location":"specifications/treewalk/#test-case-2-duplicate-normalized-names","title":"Test Case 2: Duplicate Normalized Names","text":"<p>Structure:</p> <pre><code># These normalize to the same NFC form\n  - path: \u00e9.txt        # U+00E9 (precomposed)\n  - path: e\u0301.txt       # U+0065 U+0301 (decomposed)\n</code></pre> <p>Expected (TREEWALK-BASE):</p> <pre><code># Both entries yielded if storage allows both, preserving their original forms\n  - test_dir/e\u0301.txt      # NFD form (comes first due to byte ordering)\n  - test_dir/\u00e9.txt       # NFC form\n</code></pre> <p>Note</p> <p>Storage systems typically prevent creation of both forms, so usually only one entry will exist and be yielded. The key guarantee is that whatever entries exist will be yielded deterministically.</p>"},{"location":"specifications/treewalk/#test-case-3-ignore-file-priority","title":"Test Case 3: Ignore File Priority","text":"<p>Structure:</p> <pre><code>  - path: .gitignore\n  - path: aaa.txt\n  - path: zzz.txt\n</code></pre> <p>Expected (TREEWALK-BASE):</p> <pre><code>  - test_dir/.gitignore\n  - test_dir/aaa.txt\n  - test_dir/zzz.txt\n</code></pre>"},{"location":"specifications/treewalk/#92-treewalk-ignore-tests","title":"9.2 TREEWALK-IGNORE Tests","text":""},{"location":"specifications/treewalk/#test-case-4-pattern-filtering","title":"Test Case 4: Pattern Filtering","text":"<p>Structure:</p> <pre><code>  - path: .gitignore\n    content: '*.log'\n  - path: app.py\n  - path: debug.log\n  - path: error.log\n</code></pre> <p>Expected (TREEWALK-IGNORE with .gitignore):</p> <pre><code>  - test_dir/.gitignore\n  - test_dir/app.py\n</code></pre>"},{"location":"specifications/treewalk/#93-treewalk-iscc-tests","title":"9.3 TREEWALK-ISCC Tests","text":""},{"location":"specifications/treewalk/#test-case-5-iscc-metadata-filtering","title":"Test Case 5: ISCC Metadata Filtering","text":"<p>Structure:</p> <pre><code>  - path: .isccignore\n    content: temp/\n  - path: data.txt\n  - path: data.txt.iscc.json\n  - path: temp\n    type: dir\n  - path: temp/cache.dat\n</code></pre> <p>Expected (TREEWALK-ISCC):</p> <pre><code>  - test_dir/.isccignore\n  - test_dir/data.txt\n</code></pre> <p>Note</p> <p>The <code>temp/</code> pattern prevents traversal into the temp directory, so <code>temp/cache.dat</code> is excluded. The file <code>data.txt.iscc.json</code> is automatically filtered by the ISCC extension.</p>"},{"location":"specifications/treewalk/#10-references","title":"10. References","text":""},{"location":"specifications/treewalk/#normative","title":"Normative","text":"<ul> <li>Unicode Standard Annex #15: Unicode Normalization Forms</li> <li>RFC 3629: UTF-8, a transformation format of ISO 10646</li> </ul>"},{"location":"specifications/treewalk/#informative","title":"Informative","text":"<ul> <li>gitignore(5) - Git ignore patterns specification</li> <li>ISO 24138:2024 - International Standard Content Code</li> <li>ZIP File Format Specification</li> <li>Amazon S3 API Reference</li> </ul>"},{"location":"specifications/wide/","title":"ISCC SUBTYPE WIDE","text":""},{"location":"specifications/wide/#general","title":"General","text":"<p>The ISCC SubType WIDE shall be a SubType of the MainType ISCC that allows composite ISCC-CODEs with extended precision for Data-Code and Instance-Code components using 128-bit digests instead of the standard 64-bit digests.</p>"},{"location":"specifications/wide/#purpose","title":"Purpose","text":"<p>The ISCC WIDE SubType shall provide enhanced precision and security for applications requiring higher confidence in media format agnostic data identification, verification, and similarity matching, particularly in contexts where:</p> <ol> <li>large-scale deduplication across extensive data collections is required;</li> <li>higher collision resistance is necessary for data integrity verification;</li> <li>applications demand more granular distinction between similar digital assets.</li> </ol>"},{"location":"specifications/wide/#format","title":"Format","text":"<p>The ISCC-CODE SubType WIDE shall have the data format illustrated in Figure 1:</p> <p> </p> Figure 1 - Data format of the ISCC-WIDE <p>An ISCC-CODE with SubType WIDE shall consist of:</p> <ol> <li>An ISCC-HEADER with MainType ISCC and SubType WIDE;</li> <li>An ISCC-BODY containing exactly two components:<ul> <li>A 128-bit Data-Code digest</li> <li>A 128-bit Instance-Code digest</li> </ul> </li> </ol> <p>The total length of the ISCC-BODY for SubType WIDE shall be 256 bits (32 bytes).</p> <p>EXAMPLE: 256-bit ISCC-CODE with SubType WIDE:</p> <p>ISCC:K4AP4P75GGHDLMRHGG2KJQY7NZEPU27HZYSYQ7HWCMHG2RRBK7E5O6Y</p>"},{"location":"specifications/wide/#subtype-assignment","title":"SubType Assignment","text":"<p>The SubType WIDE shall be assigned the value 7 (0111 in binary) within the ST_ISCC enumeration for MainType ISCC.</p>"},{"location":"specifications/wide/#constraints","title":"Constraints","text":"<ol> <li>An ISCC-CODE with SubType WIDE shall contain only Data-Code and Instance-Code components.</li> <li>Both the Data-Code and Instance-Code inputs shall have a length of 128 bits.</li> <li>No other ISCC-UNIT types (META, SEMANTIC, or CONTENT) shall be included in a WIDE composite.</li> </ol>"},{"location":"specifications/wide/#inputs","title":"Inputs","text":"<p>The inputs for generating an ISCC-CODE with SubType WIDE shall be:</p> <ol> <li>A Data-Code with a minimum length of 128 bits;</li> <li>An Instance-Code with a minimum length of 128 bits;</li> <li>An explicit parameter indicating the intent to create a WIDE composite.</li> </ol>"},{"location":"specifications/wide/#outputs","title":"Outputs","text":"<p>Processing of an ISCC-CODE with SubType WIDE shall generate the following output elements:</p> <ol> <li><code>iscc</code>: the ISCC-CODE in its canonical form with SubType WIDE (required);</li> <li><code>units</code>: an array containing the decomposed 256-bit components (optional);</li> <li><code>wide</code>: a boolean indicator set to true (optional);</li> <li>any other elements collected during processing of the individual components (optional).</li> </ol>"},{"location":"specifications/wide/#processing","title":"Processing","text":""},{"location":"specifications/wide/#generation","title":"Generation","text":"<p>An ISCC processor shall generate an ISCC-CODE with SubType WIDE as follows:</p> <ol> <li>Verify that exactly two ISCC-UNITs are provided: one Data-Code and one Instance-Code.</li> <li>Verify that both input codes have a minimum length of 128 bits.</li> <li>Verify that the explicit WIDE parameter is set to true.</li> <li>Decode both ISCC-UNITs to binary and remove their headers.</li> <li>Truncate the Data-Code to exactly 128 bits (16 bytes).</li> <li>Truncate the Instance-Code to exactly 128 bits (16 bytes).</li> <li>Concatenate the truncated Data-Code and Instance-Code to form the 256-bit ISCC-BODY.</li> <li>Construct the ISCC-HEADER with:<ul> <li>MainType: ISCC</li> <li>SubType: WIDE (value 7)</li> <li>Version: 0</li> <li>Length: encoded to represent 256 bits</li> </ul> </li> <li>Prefix the ISCC-BODY with the ISCC-HEADER and encode to canonical form.</li> </ol>"},{"location":"specifications/wide/#decomposition","title":"Decomposition","text":"<p>An ISCC processor shall decompose an ISCC-CODE with SubType WIDE as follows:</p> <ol> <li>Decode the ISCC-CODE and extract the header.</li> <li>Verify that the MainType is ISCC and SubType is WIDE.</li> <li>Verify that the body length is exactly 256 bits.</li> <li>Extract the first 128 bits as the Data-Code digest.</li> <li>Extract the second 128 bits as the Instance-Code digest.</li> <li>Reconstruct the individual Data-Code and Instance-Code with appropriate headers.</li> </ol>"},{"location":"specifications/wide/#comparing","title":"Comparing","text":"<p>Similarity comparison for ISCC-CODEs with SubType WIDE shall follow these principles:</p> <ol> <li>Instance-Code comparison: Two WIDE codes with identical Instance-Code components indicate the same digital     manifestation.</li> <li>Data-Code comparison: Calculate the binary hamming distance between the 128-bit Data-Code components. Lower     hamming distance values indicate higher data similarity.</li> <li>The extended 128-bit length provides approximately twice the precision of standard 64-bit comparisons,     allowing for more granular similarity thresholds.</li> </ol>"},{"location":"specifications/wide/#use-cases","title":"Use Cases","text":"<p>The ISCC WIDE SubType is particularly suitable for:</p> <ol> <li>Digital asset management systems requiring high-precision deduplication across millions of files;</li> <li>Blockchain and distributed ledger applications where collision resistance is paramount;</li> <li>Content verification systems needing enhanced confidence in data integrity;</li> <li>Large-scale media archives requiring fine-grained data similarity detection.</li> </ol> <p>NOTE</p> <p>The WIDE SubType trades increased identifier length for enhanced precision and collision resistance. Applications should evaluate whether the additional precision justifies the increased storage and transmission requirements.</p>"}]}