name: CI

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  RUST_BACKTRACE: 1

jobs:
  rust-checks:
    name: Rust Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --verbose

  python-checks:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Install dependencies
        run: |
          uv pip install --system -e .[dev]
          uv pip install --system maturin
      
      - name: Build Rust extension
        run: maturin develop
      
      - name: Run linting
        run: ruff check .
      
      - name: Check formatting
        run: ruff format --check .
      
      - name: Run type checking
        run: mypy src
      
      - name: Run tests
        run: pytest -v

  build-rust-binary:
    name: Build Rust Binary on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Build binary
        run: cargo build --release --bin iscc-sum
      
      - name: Test binary
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            ./target/release/iscc-sum.exe
          else
            ./target/release/iscc-sum
          fi
        shell: bash