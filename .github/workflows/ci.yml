name: CI

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]

env:
  RUST_BACKTRACE: 1

jobs:
  # Combined Rust checks and binary build for each OS
  rust-build-and-check:
    name: Rust Build & Check on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      # Run all Rust checks - only on Ubuntu to avoid duplication
      - name: Check formatting
        if: matrix.os == 'ubuntu-latest'
        run: cargo fmt -- --check
      
      - name: Run clippy
        if: matrix.os == 'ubuntu-latest'
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Run tests
        run: cargo test --verbose
      
      - name: Build binary
        run: cargo build --release --bin iscc-sum-rs
      
      - name: Test binary
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            ./target/release/iscc-sum-rs.exe
          else
            ./target/release/iscc-sum-rs
          fi
        shell: bash
      
      # Upload binary as artifact for other jobs
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: iscc-sum-rs-${{ matrix.os }}
          path: |
            target/release/iscc-sum-rs${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  # Python checks - strategic matrix coverage
  python-checks:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: rust-build-and-check
    strategy:
      fail-fast: false
      matrix:
        include:
          # Test all Python versions on Ubuntu
          - os: ubuntu-latest
            python-version: "3.10"
          - os: ubuntu-latest
            python-version: "3.11"
          - os: ubuntu-latest
            python-version: "3.12"
          - os: ubuntu-latest
            python-version: "3.13"
          # Test latest Python on all OS
          - os: windows-latest
            python-version: "3.13"
          - os: macos-latest
            python-version: "3.13"
          # Test oldest Python on Windows and macOS for edge cases
          - os: windows-latest
            python-version: "3.10"
          - os: macos-latest
            python-version: "3.10"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"
      
      - name: Download Rust binary
        uses: actions/download-artifact@v4
        with:
          name: iscc-sum-rs-${{ matrix.os }}
          path: target/release/
      
      - name: Make binary executable (Unix)
        if: runner.os != 'Windows'
        run: chmod +x target/release/iscc-sum-rs
      
      - name: Create virtual environment
        run: uv venv
      
      - name: Install dependencies
        run: |
          uv pip install -e .[dev]
          uv pip install maturin
      
      - name: Build Rust extension
        run: uv run maturin develop
      
      # Run Python checks - only on one job to avoid duplication
      - name: Run linting
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        run: uv run ruff check .
      
      - name: Check formatting
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        run: uv run ruff format --check .
      
      - name: Run type checking
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        run: uv run mypy src/iscc_sum
      
      - name: Run tests with coverage
        run: uv run pytest -v --cov=iscc_sum --cov-report=term-missing --cov-fail-under=100

  # Wheel installation test - one Python version per OS
  test-wheel-install:
    name: Test Wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: rust-build-and-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"  # Use latest Python for wheel tests
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build maturin wheel
      
      - name: Install python3-venv (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-venv
      
      - name: Build wheel
        run: python -m build --wheel
      
      - name: Create test environment
        run: python -m venv test_env
      
      - name: Activate and install wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          source test_env/bin/activate
          pip install dist/*.whl
          # Test that the package is installed and works
          python -c "import iscc_sum; print(iscc_sum.hello_from_bin())"
          python -m iscc_sum
          # Test that py.typed is installed
          test -f test_env/lib/python*/site-packages/iscc_sum/py.typed || exit 1
      
      - name: Activate and install wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          test_env\Scripts\Activate.ps1
          pip install (Get-ChildItem dist\*.whl).FullName
          # Test that the package is installed and works
          python -c "import iscc_sum; print(iscc_sum.hello_from_bin())"
          python -m iscc_sum
          # Test that py.typed is installed
          $pyTypedPath = Get-ChildItem -Path test_env\Lib\site-packages\iscc_sum\py.typed -ErrorAction SilentlyContinue
          if (-not $pyTypedPath) { exit 1 }
      
      - name: Test source distribution build
        run: |
          python -m build --sdist
          ls -la dist/
        shell: bash